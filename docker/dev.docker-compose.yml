version: "3.9"
networks:
  workflow:
services:
  workflow_rabbitmq:
    image: rabbitmq:3-management
    container_name: workflow_rabbitmq
    ports:
      - "5673:5672"       # AMQP protocol
      - "15673:15672"     # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - workflow
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq   # Persist queues, exchanges, etc.
  workflow_postgres:
    image: postgres:latest
    container_name: workflow_postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    networks:
      - workflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
  workflow_worker:
    build:
      context: ../app/connectors-service
      dockerfile: Dockerfile.worker
    container_name: workflow_worker
    volumes:
      - ../app/connectors-service:/app
    environment:
      - CELERY_BROKER=pyamqp://guest:guest@workflow_rabbitmq:5672
      - CELERY_BACKEND=db+postgresql://postgres:password@workflow_postgres:5432/celery_logs?sslmode=disable
      - MQ_URL=amqp://guest:guest@workflow_rabbitmq:5672
    restart: on-failure
    networks:
      - workflow
    depends_on:
      - workflow_postgres
      - workflow_rabbitmq
  connector_service:
    build:
      context: ../app/connectors-service
      dockerfile: Dockerfile.dev
    container_name: connector_service
    ports:
      - "8000:8000"
    volumes:
      - ../app/connectors-service:/app
    environment:
      - CELERY_BROKER=pyamqp://guest:guest@workflow_rabbitmq:5672
      - CELERY_BACKEND=db+postgresql://postgres:password@workflow_postgres:5432/celery_logs?sslmode=disable
      - MQ_URL=amqp://guest:guest@workflow_rabbitmq:5672
    restart: on-failure
    networks:
      - workflow
    depends_on:
      - workflow_postgres
      - workflow_rabbitmq
  frontend:
    build:
      context: ../app/workflow-frontend
      dockerfile: Dockerfile.dev
    container_name: frontend
    ports:
      - "3000:3000"
    volumes:
      - ../app/workflow-frontend:/app
      - /app/node_modules
    restart: on-failure
    networks:
      - workflow
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - NODE_ENV=development
    depends_on:
      - connector_service
  # nginx:
    # image: nginx:alpine
    # container_name: nginx
    # ports:
    #   - "8001:80"
    # volumes:
    #   - ../app/nginx/conf.d:/etc/nginx/conf.d   # Mount your config directory
    #   - ../app/nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # Main config (optional)
    # restart: unless-stopped
volumes:
  postgres_data:
  rabbitmq_data: