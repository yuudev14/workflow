version: "3.9"
name: workflow-project
networks:
  workflow:
services:
  workflow_rabbitmq:
    image: rabbitmq:3-management
    container_name: workflow_rabbitmq
    ports:
      - "5673:5672"
      - "15673:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - workflow
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
  workflow_postgres:
    image: postgres:latest
    container_name: workflow_postgres
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=workflow
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - workflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
  workflow_worker:
    build:
      context: ../app/connectors-service
      dockerfile: Dockerfile.worker
    container_name: workflow_worker
    volumes:
      - ../app/connectors-service:/app
    environment:
      - CELERY_BROKER=pyamqp://guest:guest@workflow_rabbitmq:5672
      - CELERY_BACKEND=db+postgresql://postgres:password@workflow_postgres:5432/celery_logs?sslmode=disable
      - MQ_URL=amqp://guest:guest@workflow_rabbitmq:5672
    # restart: on-failure
    networks:
      - workflow
    depends_on:
      workflow_postgres:
        condition: service_healthy
      workflow_rabbitmq:
        condition: service_healthy
  connector_service:
    build:
      context: ../app/connectors-service
      dockerfile: Dockerfile.dev
    container_name: connector_service
    ports:
      - "8000:8000"
    volumes:
      - ../app/connectors-service:/app
    environment:
      - CELERY_BROKER=pyamqp://guest:guest@workflow_rabbitmq:5672
      - CELERY_BACKEND=db+postgresql://postgres:password@workflow_postgres:5432/celery_logs?sslmode=disable
      - MQ_URL=amqp://guest:guest@workflow_rabbitmq:5672
    networks:
      - workflow
    depends_on:
      workflow_postgres:
        condition: service_healthy
      workflow_rabbitmq:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ../app/connectors-service
          target: /app
  workflow_service:
    build:
      context: ../app/workflow_service
      dockerfile: Dockerfile.dev
    container_name: workflow_service
    ports:
      - "8080:8080"
    volumes:
      - ../app/workflow_service:/app
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_HOST=workflow_postgres
      - DB_PORT=5432
      - DB_NAME=workflow
      - MQ_USERL=guest
      - MQ_PASSWORD=guest
      - MQ_HOST=workflow_rabbitmq
      - MQ_PORT=5672
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - AIR_WATCHER_POLL=true
      
    # restart: on-failure
    networks:
      - workflow
    develop:
      watch:
        - action: sync
          path: ../app/workflow_service
          target: /app
    depends_on:
      workflow_postgres:
        condition: service_healthy
      workflow_rabbitmq:
        condition: service_healthy
  frontend:
    build:
      context: ../app/workflow-frontend
      dockerfile: Dockerfile.dev
    container_name: frontend
    ports:
      - "3000:3000"
    volumes:
      - ../app/workflow-frontend:/app
      - /app/node_modules
    # restart: on-failure
    networks:
      - workflow
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - NODE_ENV=development
    depends_on:
      - connector_service
      - workflow_service
    develop:
      watch:
        - action: sync
          path: ../app/workflow-frontend
          target: /app
  # nginx:
    # image: nginx:alpine
    # container_name: nginx
    # ports:
    #   - "8001:80"
    # volumes:
    #   - ../app/nginx/conf.d:/etc/nginx/conf.d   # Mount your config directory
    #   - ../app/nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # Main config (optional)
    # restart: unless-stopped
volumes:
  postgres_data:
  rabbitmq_data: